- thumbsize = 50
- blueish = '#39f'
- borderWidth = 2
- iconPixelDim = 16
- handleWidth = 10
- thumbsizeWithBorder = thumbsize + borderWidth
- magic_adjustment_factor = 8

- language = :ia
- translations = { en: { confirmDeleteFace: 'Do you really want to delete this face?',
                         deleteFace: 'Delete face',
                         detailsButton: 'Details', 
                         photoButton: 'Photo', 
                         markPhoto: 'Mark this photo for later attention',
                         restoreButton: 'Restore Faces',
                         tryAgain: 'An error occurred. Please try again.' }, 
                   ia: { confirmDeleteFace: 'oDay youway eallyray antway otay eleteday isthay acefay?',
                         deleteFace: 'eleteDay acefay',
                         detailsButton: 'etailsDay', 
                         photoButton: 'otoPhay',
                         markPhoto: 'arkMay isthay otophay orfay aterlay attentionway',
                         restoreButton: 'estoreRay acesFay',
                         tryAgain: 'Anway errorway occurredway. easePlay ytray againway.' } }

:javascript
  var app = angular.module('mugmarker', []);

  // mmMovable: not really draggable (no drop needed), with a containment rectangle specified
  // derived from https://docs.angularjs.org/guide/directive (see "Creating a Directive that Adds Event Listeners")
  
  app.directive('mmMovable', ['$document', function($document) {
    return {
      scope:
      {
        mmMovable: '&',
        mmMovableContainment: '&' // the containment is specified in the argument
      },
      link: function(scope, element, attr) 
      {
        var containment = scope.mmMovableContainment();
        var face = scope.mmMovable();

        var ele = element[0]; // extract the actual element
        var top = containment.top - (ele.offsetHeight / 2);
        var bottom = containment.top + containment.height - (ele.offsetHeight / 2);

        var left = containment.left - (ele.offsetWidth / 2);
        var right = containment.left + containment.width - (ele.offsetWidth / 2);
        
        var startX = 0, startY = 0, x = face.h - #{magic_adjustment_factor}, y = face.w - #{magic_adjustment_factor};

        element.on('mousedown', function(event) {
          // Prevent default dragging of selected content
          event.preventDefault();
          startX = event.pageX - x;
          startY = event.pageY - y;
          $document.on('mousemove', mousemove);
          $document.on('mouseup', mouseup);
        });

        function mousemove(event) {
          var deltaX = x;
          var deltaY = y;
          y = Math.min(Math.max(event.pageY - startY, top), bottom);
          x = Math.min(Math.max(event.pageX - startX, left), right);
          deltaX = x - deltaX;
          deltaY = y - deltaY;

          face.x -= deltaX;
          face.y -= deltaY;
          face.h += deltaY * 2;
          face.w += deltaX * 2;
          scope.$apply();
        }

        function mouseup() {
          $document.off('mousemove', mousemove);
          $document.off('mouseup', mouseup);
        }
      }
    };
  }]);

  var appServices = angular.module('phonecatServices', ['ngResource']);

  appServices.factory('Photo',  ['$resource',
                                        function($resource)
                                        { // TODO HOW DO YOU DEAL WITH ERRORS?
                                          return $resource('#{api_v1_pics_path}/:photoId.json', 
                                                           {}, 
                                                           {
                                                              query: 
                                                                {
                                                                  method:'GET', 
                                                                  params:
                                                                  {
                                                                    photoId: 200, 
                                                                    aId: 1
                                                                  },
                                                                  isArray: true
                                                              }
                                                            }
                                          );
                                        }
                                      ]
  );
  app.controller('PhotosController', ['$scope', 
                                      '$http', 
                                      function PhotosController($scope, $http)
                                      {
                                        $http.get("#{api_v1_pics_path}/3.json?a_id=1") // TODO Add actual photo id
                                             .success(function(response)
                                                      { 
                                                         $scope.photo = response;
                                                      }
                                             );
                                             // TODO ERROR HANDLING
                                        $scope.addFaceAt = function(x, y)
                                        {
                                          // We calculate the average width and height of visible faces
                                          var faces = $scope.photo.notes;
                                          var sumW = 0;
                                          var sumH = 0;
                                          var meanWidth = 0;
                                          var meanHeight = 0;
                                          var minFaceDimension = 50; /* Pixels */
                                          var n = 0;
                                          for (var i = 0; i < faces.length; i++)
                                          {
                                            // Skip the deleted faces
                                            if (!faces[i].deleted)
                                            {
                                              sumW += faces[i].w;
                                              sumH += faces[i].h;
                                              n += 1;
                                            }
                                          }
                                          if (n > 0)
                                          {
                                            meanWidth = sumW / n;
                                            meanHeight = sumH / n;
                                          }

                                          meanWidth = Math.max(meanWidth, minFaceDimension);
                                          meanHeight = Math.max(meanHeight, minFaceDimension);

                                          var face = {x: x - (meanWidth / 2), 
                                                      y: y - (meanHeight / 2), 
                                                      w: meanWidth, 
                                                      h: meanHeight, 
                                                      deleted: false,
                                                      manual: true, 
                                                      text: null,
                                                      faceId: null,
                                                    };
                                          if ((0 < face.x) && (face.x < ($scope.photo.scaled_w - (meanWidth / 2))) &&
                                              (0 < face.y) && (face.y < ($scope.photo.scaled_h - (meanHeight / 2))))
                                          {
                                            faces.push(face);
                                          }
                                        }
                                        $scope.confirmFaceDelection = function(face)
                                                                      {
                                                                        if (confirm('#{translations[language][:confirmDeleteFace]}'))
                                                                        {
                                                                          face.deleted = true;
                                                                          $scope.setHoverFace(null);
                                                                          $scope.setSelectedFace(null);
                                                                        }
                                                                      }
                                        $scope.handleVisible = function()
                                                               {
                                                                 return $scope.selectedFace && ($scope.selectedFace.known);
                                                               }
                                        $scope.setHoverFace = function(face)
                                                              {
                                                                $scope.hoverFace = face;
                                                              }
                                        $scope.setSelectedFace = function(face)
                                                                 {
                                                                   // If the face is deleted, don't set it. (there's a race condition)
                                                                   if (face && face.deleted)
                                                                   {
                                                                     $scope.selectedFace = null;
                                                                   }
                                                                   else
                                                                   {
                                                                     $scope.selectedFace = face;

                                                                   }
                                                                 }
                                        $scope.setHoverFace(null);
                                        $scope.setSelectedFace(null);
                                      }
                                    ]
  );

  app.controller('NamesController', [ '$scope', 
                                      '$http', 
                                      function NamesController($scope, $http)
                                      {
                                        $http.get("#{api_v1_names_path}.json?a_id=1")
                                             .success(function(response)
                                                      { 
                                                         $scope.names = response;
                                                      }
                                             );
                                          $scope.setSelectedName = function(name)
                                                                   {
                                                                     selectedName = name
                                                                   }
                                      }
                                    ]
  );
  app.factory( 'musicPlayer', function() {
    var currentSongId;

    // public API
    return {
      getCurrentSong: function () { return currentSongId; },
      setCurrentSong: function ( id ) { currentSongId = id; }
    };
  });
  app.filter('matchesNameNeedle', function ()
                                  {
                                    return function (name) {
                                        return name.publicName.toUpperCase();
                                    };
                                  }
  );

  
-# // ***** This is all the markup for the page *****
.row
  %p#notice= notice

.row#picturebar-container{style: 'height: 114px; overflow-y: scroll; white-space: nowrap;'}
  #picturebar{style: "position:relative;" }

.row{style: 'margin: 1em;'}
  .col-xs-8
    .btn-group{role: :group, 'aria-label' => 'Control what is displayed'}
      %button.btn.btn-default{id: :photoButton }
        #{translations[language][:photoButton]}
      %button.btn.btn-default{id: :detailsButton }
        #{translations[language][:detailsButton]}
    .btn-group{id: :restoreGroup}
      %button.btn.btn-default.dropdown-toggle{id: :restoreButton, 
                                              'data-toggle' => :dropdown, 
                                              'aria-expanded' => 'false'}
        #{translations[language][:restoreButton]}
        %span.caret
      %ul.dropdown-menu{id: :restoreFaces, role: :menu}
  .col-xs-4
    %span.glyphicon.glyphicon-flag.pull-right{style: 'font-size: 140%;', 
                                              title: translations[language][:markPhoto],
                                              'aria-label' => 'not flagged'}

.row{'ng-controller' => 'PhotosController'}
  .col-xs-8
    #picture-container{style: 'position: relative;'}
      %img#photo-img.img-responsive{src: '{{photo.url}}',
                                    'ng-click' => 'addFaceAt($event.offsetX, $event.offsetY)'}
      #face-frame-container
        .face-frame{'ng-repeat' => 'face in photo.notes',
                    'ng-hide' => 'face.deleted',
                    'ng-mouseenter' => 'setHoverFace(face)',
                    'ng-mouseleave' => 'setHoverFace(null)',
                    'ng-click' => 'setSelectedFace(face)',
                    'ng-style' => '{width: face.w + "px", height: face.h + "px", left: face.x + "px", top: face.y + "px", "background-color": (face === selectedFace ? "green" : "orange")}'}
          .deleteControl{'ng-style' => '{position: "relative"}',
                         'ng-click' => 'confirmFaceDelection(face)'}
            %span.glyphicon.glyphicon-remove{'aria-label'=> "#{translations[language][:deleteFace]}", 
                                             'title'=>"#{translations[language][:deleteFace]}"}
          %form.name-display-form{'ng-style' => '{top: face.h  - 2 + "px"}'}
            %input.name-display-box.form-control.input-sm.ellipsis{'ng-model' => 'face.text',
                                                                   'ng-show' => '(face === hoverFace)',
                                                                   type: :text, 
                                                                   placeholder: 'Unknown',
                                                                   readonly: 'readonly'}
          .handle{'ng-show' => 'handleVisible() && (face === selectedFace)', 
                  'mm-movable' => 'face',
                  'mm-movable-containment' => '{top: (face.w / 2) + 10, left: (face.h / 2) + 10, width: 100, height: 100}',
                  'mm-comment' => '8 in the next line is the "magic_adjustment_factor"',
                  'ng-style' => '{position: relative, top: face.h - 8 + "px", left: face.w  - 8 + "px"}' }
            &nbsp;


%div{'ng-controller' => 'NamesController'}
  #name{style: "display: block;"}
    %form#name-entry-form{novalidate: :novalidate, :style => "width: 20em;"}
      .input-group
        %input#name-entry-box.form-control.input-sm{'ng-model' => "nameNeedle",
                                                    :placeholder => "Enter Name",
                                                    :type => "text"}/
        %span#name-clear.input-group-addon.glyphicon.glyphicon-remove-circle{"aria-label" => "Clear the name input field", :style => "top: 0;"}
      #names-container{:style => "width: 20em; max-height: 170px; display: block;"}
        .row{'ng-repeat' => 'name in names', 
             'ng-click' => 'setSelectedName(name)',
             'ng-show' => 'name.publicName.toLowerCase().indexOf(nameNeedle.toLowerCase()) > -1'}
          .col-xs-1{:style => "padding-left: 4px; min-width: 38px; "}
            %img{:src => "https://upload.wikimedia.org/wikipedia/en/6/6f/Smiley_Face.png", :style => "height:30px"}/
          .col-xs-10.ellipsis{:style => "padding: 0;"}
            {{ name.publicName }}
            .namenote
              {{ name.note ? name.note : ' ' }} {{name.publicName.toLowerCase().indexOf(nameNeedle.toLowerCase()) > -1 }}

