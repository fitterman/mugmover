- thumbsize = 50
- thumbsizeWithBorder = thumbsize + 2

:css
  .picturethumb { z-index: 2; display: inline-flex; 
                  width: #{thumbsizeWithBorder}px; height: #{thumbsizeWithBorder}px; 
                  background-size: contain; background-color: white;
                  border: 2px solid white; 
                }
  .handle       { position: absolute;
                  background-color: #39f;
                  width: 10px;
                  height: 10px;
                  border-radius: 5px;
                  z-index: 125;
                  cursor: 'pointer'
                }
  .unselected   { opacity: 0.5; }
  .selected     { background-color: #33f; border: 2px solid red; opacity: 1.0; }
  .enlarged     { z-index: 3; opacity: 1.0; 
                  width: #{2 * thumbsizeWithBorder}px; height: #{2 * thumbsizeWithBorder}px; }
  #picturebar-container::-webkit-scrollbar { -webkit-appearance: none; height: 10px; width: 0px; }
  #picturebar-container::-webkit-scrollbar-track { background-color: rgba(0, 0, 0, .2);  
                                                   border: 1px solid silver; 
                                                   border-radius: 10px; }
  #picturebar-container::-webkit-scrollbar-thumb { border-radius: 8px; background-color: rgba(0, 0, 0, .4); }

.row
  %p#notice= notice

.row#picturebar-container{style: 'height: 114px; overflow-y: scroll; white-space: nowrap;'}
  #picturebar{style: "position:relative;" }

.row{style: 'margin: 1em;'}
  .col-xs-8
    .btn-group{role: :group, 'aria-label' => 'display control'}
      %button.btn.btn-default{id: :photoButton }
        Photo
      %button.btn.btn-default{id: :detailsButton }
        Details
  .col-xs-4
    %span.glyphicon.glyphicon-flag.pull-right{style: 'font-size: 140%;', 
                                              title: 'Mark this photo for later attention',
                                              'aria-label' => 'not flagged'}

.jumbotron
  #picture-container{style: 'position: relative; margin-left: auto; margin-right: auto;'}
    
:plain
  <script type="text/template" id="photos-template-text">
    <% _.each(photos, function(photo) { %>
      <% if ($('.picturethumb[phid=' + photo.get('id') + ']').length == 0) { %>
          <div class="picturethumb unselected" style="position: absolute; 
              background-repeat: no-repeat; background-position: center; 
              background-image: url('<%- photo.get('thumb') %>');
              top: 27px;
              left: <%- i2x(photo.get('index')) %>px;" 
              phw="<%- photo.get('scaled_w') %>"
              phh="<%- photo.get('scaled_h') %>"
              phid="<%- photo.get('id') %>">
          </div>
      <% }; %>
    <% }); %>
    <% var rightX = $('#picturebar-container').scrollLeft() + $('#picturebar-container').width(); %>
    <% var rightN = Math.floor(x2i(rightX) / photosPerRequest); %>
    <% var currentN = Math.floor(photos[photos.length-1].get('index') / photosPerRequest); %>
    <% if ((currentN < rightN) && (currentN < lastRequestN)) { %>
      <% photoList.render({a_id: '#{params[:a_id]}', n: currentN + 1}); %>
    <% }; %>
  </script>

  <script type="text/template" id="photo-template-text">
      <img id="photo-img" src=<%- photo.get('url') %> 
           style="z-index: 1; position: absolute; top: 0; left: 0; background-color: tan; max-width:500px; max-height:500px;" />
      <% var notes = photo.get('notes'); %>
      <% for (var i = 0, len = notes.length; i < len; i++) { %>
          <div class="face-frame" style="z-index: 110; position: absolute; border: 2px solid #39f;
              left: <%- notes[i].x %>px; top: <%- notes[i].y %>px;
              width: <%- notes[i].w %>px; height: <%- notes[i].h %>px;" 
              data-caption="<%- notes[i].text %>" data-phid="<%- notes[i].faceId %>"
              data-manual="<%- notes[i].manual %>" data-known="<%- notes[i].known %>">
            <div class="caption" style="opacity: 0.0; z-index: 108; white-space: nowrap; position: absolute; height: 1.8em; bottom: -1.95em; background-color: beige;
                                        padding-left: 0.5em; padding-right: 0.5em;  margin-left: -2px; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; ">
              <%- notes[i].known ? notes[i].text : 'unknown' %>
            </div>
          </div>

      <% }; %>
  </script>

  <script type="text/template" id="photo-details-template-text">
    <pre><%- JSON.stringify(photo.get('request'), null, 4) %></pre> 
  </script>

:javascript
  var endGap = 400; // pixels
  var photoWidth = #{thumbsizeWithBorder}; // pixels (2px on each side)
  var totalPhotos = #{@total_photos};
  var photosPerRequest = #{Api::V1::PicsController::PAGESIZE};
  var lastRequestN = Math.floor(totalPhotos  / photosPerRequest);
  var currentPhoto;
  
  // functions to convert a zero-based index to a horizontal pixel offset and back.
  var i2x = function(i) { return endGap + (i * photoWidth) };
  var x2i = function(x) { return Math.floor(Math.max(0, x - endGap) / photoWidth) };


  // ***** This code supports interacting with a single face *****
  
  $('#picture-container').on('mouseover', '.face-frame', function() {
    $(this).css({'z-index': '112' }).children('.caption').css({opacity: 1.0, 'z-index': '112'});
  })
  $('#picture-container').on('mouseout', '.face-frame', function() {
    $(this).css({'z-index': '110' }).children('.caption').css({opacity: 0.0, 'z-index': '108'});
  });
  $('#picture-container').on('click', 'img', function(ev) {
    // For now, clicking the image reverses the image editor activation.
    $('.face-frame.ui-draggable').draggable('destroy').css({cursor: 'auto'});
    $('.handle').draggable('destroy').remove();
    console.log("image was clicked")
  });
  $('#picture-container').on('click', '.face-frame', function(ev) {
    if (!$(this).data('manual'))
    {
      return false;
    }

    var face = this;
    var faceOriginalPosition;
    var faceOriginalW;
    var faceOriginalH;
    var relPos;

    var setRelPos = function()
    {
      faceOriginalW = $(face).width();
      faceOriginalH = $(face).height();
      faceOriginalPosition = $(face).position();
      relPos = {top: faceOriginalPosition.top + faceOriginalH - 5, 
                left: faceOriginalPosition.left + faceOriginalW - 5};
    }
    setRelPos();

    var setHandleContainmentRectangle = function(target)
    {
      var containerPosition = $('#picture-container').position();
      var facePosition = $(face).position();
      var faceCenterX = containerPosition.left + facePosition.left + (faceOriginalW / 2);
      var faceCenterY = containerPosition.top + facePosition.top + (faceOriginalH / 2);
      var distanceToEachEdge = [faceCenterX - containerPosition.left, 
                                containerPosition.left + $('#picture-container > img').width() - faceCenterX];
      var maxDeltaX = Math.min.apply(null, distanceToEachEdge);
      distanceToEachEdge = [faceCenterY - containerPosition.top, 
                            containerPosition.top + $('#picture-container > img').height() - faceCenterY];
      var maxDeltaY = Math.min.apply(null, distanceToEachEdge);
      var handleContainment = [faceCenterX, /* Do not adjust because handle is positioned from its left edge */ 
                               faceCenterY,
                               faceCenterX + maxDeltaX - 10,
                               faceCenterY + maxDeltaY - 10
                              ];
      $(target).draggable('option', 'containment', handleContainment); 
    }
    var setFaceContainmentRectangle = function(target)
    {
      var imgPosition = $('#picture-container').position();
      var faceContainmentRectangle = [imgPosition.left + 5, 
                                      imgPosition.top + 5,
                                      imgPosition.left + $('#picture-container > img').width() - ($(face).width() + 5),
                                      imgPosition.top + $('#picture-container > img').height() - ($(face).width() + 5)];
      $(target).draggable('option', 'containment', faceContainmentRectangle)
    }

    //    $('<div class="handle" style="top: -5px; left: -5px;     cursor: nwse-resize;">&nbsp</div>')
    var handleEle = $('<div class="handle" style="position:absolute; cursor: nwse-resize;">&nbsp</div>');
    handleEle.offset(relPos)
             .appendTo('#picture-container')
             .draggable({drag: function(ev, ui)
                                {
                                  var deltaX = ui.position.left - relPos.left;
                                  var deltaY = ui.position.top - relPos.top;
                                  var newPos = {top: faceOriginalPosition.top  - deltaY,
                                                left: faceOriginalPosition.left - deltaX };
                                  $(face).width(faceOriginalW + (2 * deltaX));
                                  $(face).height(faceOriginalH + (2 * deltaY));
                                  $(face).css(newPos);
                                },
                          stop: function(ev, ui)
                                {
                                  setRelPos();
                                  setFaceContainmentRectangle(face);
                                }
              });

    $(this).css({border: '2px solid #39f', cursor: 'move' });

    $(this).draggable({ drag: function(ev, ui)
                        {
                          setRelPos();
                          $('.handle').css(relPos);
                        },
                        stop: function(ev, ui)
                        {
                          setHandleContainmentRectangle(handleEle);
                        }
            });
    setHandleContainmentRectangle(handleEle);
    setFaceContainmentRectangle(face);
  });

  // ***** This code supports the toolbar controls *****
  
  $('button#photoButton').on('click', function() {  router.navigate('show/' + currentPhoto.id , {trigger: true}); });
  $('button#detailsButton').on('click', function() {  router.navigate('details/' + currentPhoto.id , {trigger: true}); });
  $('.glyphicon-flag').on('click', function() {
    var newState = toggleFlagSetting();
    setFlagAtServer(newState);
  });
  $('#picturebar').width(i2x(totalPhotos) + endGap); // f is the endGap on the RHS

  // ***** Code for supporting flag display and updates *****
  
  var setFlagColor = function(newState) { // function to set the displayed flag to match a given state
    var obj = $('.glyphicon-flag');
    $(obj).css({color:  newState ? 'purple' : 'gray' })
          .attr('aria-label', newState ? 'flagged' : 'not flagged');
  }
  
  var toggleFlagSetting = function() // function to flip the flag state and display the corresponding flag
  {
    var currentState = $.inArray(currentPhoto.attributes.flag, [1, true]) != -1;
    setFlagColor(!currentState);
    return !currentState;
  }

  var setFlagAtServer = function(newValue) // function to set the flag state and recover the display if it fails
  {
    $.ajax({
             url: "#{flag_api_v1_pics_url}",
             data: {a_id: '#{params[:a_id]}', id: currentPhoto.attributes.id, flag: newValue ? 1 : 0},
             type: 'POST',
             error: function()
             {
               alert("The mugmover server failed to mark the request");
             },
             success: function(data)
             {
               currentPhoto.attributes.flag = data.photo.flag
             },
             complete: function()
             {
               var currentState = currentPhoto.attributes.flag; // restore the flag state
               setFlagColor(currentState);
             }

           });   
  }

  // ***** This code deals with the scroller for navigating all the photos *****
  
  var scrollingDone = function() {
    var x = $('#picturebar-container').scrollLeft();
    var i = x2i(x);
    photoList.render({a_id: '#{params[:a_id]}', n: Math.floor(i / photosPerRequest)}); 
  };
  $('#picturebar-container').scroll( $.debounce( 250, scrollingDone) );

  $('#picturebar').on('mouseover', '.picturethumb', function() {
    $(this).addClass('enlarged').css({ top: $(this).position().top - #{thumbsizeWithBorder / 2},
                                       left: $(this).position().left - #{thumbsizeWithBorder / 2}});
                                     });
  $('#picturebar').on('mouseout', '.picturethumb', function() {
    $(this).removeClass('enlarged').css({ top: $(this).position().top + #{thumbsizeWithBorder / 2},
                                          left: $(this).position().left + #{thumbsizeWithBorder / 2}});
                                        });
  $('#picturebar').on('click', '.picturethumb', function() {
    $('#picturebar > .selected').removeClass('selected').addClass('unselected');
    // TODO Fill in with the image you have. Requires knowing the AR of the photo 
      $('#picture-container').html('&nbsp;').css({'background-image': $(this).css('background-image'), 
                                                  "background-size": 'contain', 
                                                  "background-repeat": 'none',
                                                  "background-color": 'white',
                                                  'width': $(this).attr('phw'),
                                                  'height': $(this).attr('phh')});
    //                                      .css(parseFloat($(this).attr("ar")) > 1.0 ? 'width' : 'height', "500px");
    $(this).removeClass('unselected').addClass('selected');
    router.navigate('show/' + $(this).attr('phid') , {trigger: true});
  });

  // ***** This is all the Backbone stuff *****

  var Photos = Backbone.Collection.extend({
    url: "#{api_v1_pics_path(format: 'json')}"
  });
  var Photo = Backbone.Model.extend({
    url: function() {return "#{api_v1_pics_path}/" + this.attributes.id + '.json?a_id=' + this.attributes.a_id},
  });
  var PhotoDetails = Backbone.Model.extend({
    url: function() {return "#{details_api_v1_pics_path}" + '.json?a_id=' + this.attributes.a_id + '&id=' + this.attributes.id},
  });

  var PhotoList = Backbone.View.extend({
    el: '#picturebar',
    render: function(options) {
      var photos =  new Photos();
      var that = this;
      photos.fetch({
        data: { n: options.n, a_id: options.a_id },
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photos) {
          var template = _.template($('#photos-template-text').html());
          var html = template({ photos: photos.models });
          that.$el.append(html);
          return this;
        }
      })
      
    }
  });
  var ShowPhoto = Backbone.View.extend({
    el: '#picture-container',
    render: function(options) {
      currentPhoto = new Photo({a_id: options.a_id, id: options.id});
      var that = this;
      currentPhoto.fetch({
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photo) {
          var template = _.template($('#photo-template-text').html());
          var html = template({photo: photo});
          that.$el.html(html);
          setFlagColor(currentPhoto.attributes.flag);
          if ($('#picturebar').html() == "")
          {
            photoList.render({a_id: options.a_id, n: 0});
          }
          return this;
        }        
      })
    }
  });

  var ShowPhotoDetails = Backbone.View.extend({
    el: '#picture-container',
    render: function(options) {
      var photoDetails = new PhotoDetails({a_id: options.a_id, id: options.id});
      var that = this;
      photoDetails.fetch({
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photo) {
          var template = _.template($('#photo-details-template-text').html());
          var html = template({photo: photo});
          that.$el.html(html).css({width: '100%'});
          //          setFlagColor(currentPhoto.attributes.flag);
          if ($('#picturebar').html() == "")
          {
            photoList.render({a_id: options.a_id, n: 0});
          }
          return this;
        }        
      })
    }
  });

  var Router = Backbone.Router.extend({
    routes: {
      '':         'home',
      'show/:id': 'show',
      'details/:id': 'details',
    }
  });

  var router = new Router();
  var photoList = new PhotoList();
  var showPhoto = new ShowPhoto();
  var showPhotoDetails = new ShowPhotoDetails();

  router.on('route:home', function() {
    photoList.render({a_id: #{params[:a_id]}, n: 0});
  });
  router.on('route:show', function(id) {
    showPhoto.render({a_id: #{params[:a_id]}, id: id})
  });
  router.on('route:details', function(id) {
    showPhotoDetails.render({a_id: #{params[:a_id]}, id: id})
  });
  Backbone.history.start();
