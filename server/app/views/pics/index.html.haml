- thumbsize = 50
- thumbsizeWithBorder = 52

:css
  .picturethumb { z-index: 2; display: inline-flex; 
                  width: #{thumbsizeWithBorder}px; height: #{thumbsizeWithBorder}px; 
                  background-size: contain; background-color: white;
                  border: 2px solid white; }
  .unselected   { opacity: 0.5; }
  .selected     { background-color: red; border: 2px solid red; opacity: 1.0; }
  .enlarged     { z-index: 3; opacity: 1.0; 
                  width: #{2 * thumbsizeWithBorder}px; height: #{2 * thumbsizeWithBorder}px; }
  #picturebar-container::-webkit-scrollbar { -webkit-appearance: none; height: 10px; width: 0px; }
  #picturebar-container::-webkit-scrollbar-track { background-color: rgba(0, 0, 0, .2);  
                                                   border: 1px solid silver; 
                                                   border-radius: 10px; }
  #picturebar-container::-webkit-scrollbar-thumb { border-radius: 8px; background-color: rgba(0, 0, 0, .4); }

%p#notice= notice

- content_for :title do
  picsf / 
  = params[:a_id]

#caption
  &nbsp;

#picturebar-container{style: 'height: 114px; overflow-y: scroll; white-space: nowrap; margin-bottom: 1em;'}
  #picturebar{style: "position:relative;" }

#picture-container{style: 'position:relative;'}
    
:plain
  <script type="text/template" id="photos-template-text">
    <% _.each(photos, function(photo) { %>
      <% if ($('.picturethumb[phid=' + photo.get('id') + ']').length == 0) { %>
          <div class="picturethumb unselected" style="position: absolute; 
              background-repeat: no-repeat; background-position: center; 
              background-image: url('<%- photo.get('thumb') %>');
              top: 27px;
              left: <%- i2x(photo.get('index')) %>px;" 
              phw="<%- photo.get('scaled_w') %>"
              phh="<%- photo.get('scaled_h') %>"
              phid="<%- photo.get('id') %>">
          </div>
      <% }; %>
    <% }); %>
    <% var rightX = $('#picturebar-container').scrollLeft() + $('#picturebar-container').width(); %>
    <% var rightN = Math.floor(x2i(rightX) / photosPerRequest); %>
    <% var currentN = Math.floor(photos[photos.length-1].get('index') / photosPerRequest); %>
    <% if ((currentN < rightN) && (currentN < lastRequestN)) { %>
      <% photoList.render({a_id: '#{params[:a_id]}', n: currentN + 1}); %>
    <% }; %>
  </script>

  <script type="text/template" id="photo-template-text">
    <img src=<%- photo.get('url') %> 
         style="position:relative; z-index: 1; position: absolute; top: 0; left: 0; max-width:500px; max-height:500px;">
    <% var notes = photo.get('notes'); %>
    <% for (var i = 0, len = notes.length; i < len; i++) { %>
        <div class="floating" style="z-index: 100; position: absolute; border: 2px solid blue;
            left: <%- notes[i].x %>px; top: <%- notes[i].y %>px;
            width: <%- notes[i].w %>px; height: <%- notes[i].h %>px;" 
            data-caption="<%- notes[i].text %>"></div>
    <% }; %>
    </img>
  </script>

:javascript
  var endGap = 400; // pixels
  var photoWidth = #{thumbsizeWithBorder}; // pixels (2px on each side)
  var totalPhotos = #{@total_photos};
  var photosPerRequest = #{Api::V1::PicsController::PAGESIZE};
  var lastRequestN = Math.floor(totalPhotos  / photosPerRequest);

  // functions to convert a zero-based index to a horizontal pixel offset and back.
  var i2x = function(i) { return endGap + (i * photoWidth) };
  var x2i = function(x) { return Math.floor(Math.max(0, x - endGap) / photoWidth) };

  $('#picturebar').width(i2x(totalPhotos) + endGap); // that is the endGap on the RHS
  $('#picture-container').on('mouseover', '.floating', function() {
    $(this).css('border-color', 'red');
    $('#caption').html($(this).data('caption'));
  })
  $('#picture-container').on('mouseout', '.floating', function() {
    $(this).css('border-color', 'blue');
    $('#caption').html('&nbsp;');
  });

  var scrollingDone = function() {
    var x = $('#picturebar-container').scrollLeft();
    var i = x2i(x);
    photoList.render({a_id: '#{params[:a_id]}', n: Math.floor(i / photosPerRequest)}); 
  };
  $('#picturebar-container').scroll( $.debounce( 250, scrollingDone) );

  $('#picturebar').on('mouseover', '.picturethumb', function() {
    $(this).addClass('enlarged').css({ top: $(this).position().top - #{thumbsizeWithBorder / 2},
                                       left: $(this).position().left - #{thumbsizeWithBorder / 2}});
                                     });
  $('#picturebar').on('mouseout', '.picturethumb', function() {
    $(this).removeClass('enlarged').css({ top: $(this).position().top + #{thumbsizeWithBorder / 2},
                                          left: $(this).position().left + #{thumbsizeWithBorder / 2}});
                                        });
  $('#picturebar').on('click', '.picturethumb', function() {
    $('#picturebar > .selected').removeClass('selected').addClass('unselected');
    // TODO Fill in with the image you have. Requires knowing the AR of the photo 
      $('#picture-container').html('&nbsp;').css({'background-image': $(this).css('background-image'), 
                                                  "background-size": 'contain', 
                                                  "background-color": 'white',
                                                  'width': $(this).attr('phw'),
                                                  'height': $(this).attr('phh')});
    //                                      .css(parseFloat($(this).attr("ar")) > 1.0 ? 'width' : 'height', "500px");
    $(this).removeClass('unselected').addClass('selected');
    router.navigate('show/' + $(this).attr('phid') , {trigger: true});
  });

  var Photos = Backbone.Collection.extend({
    url: '/api/v1/pics.json'
  });
  var Photo = Backbone.Model.extend({
    url: function() {return "/api/v1/pics/" + this.attributes.id + '.json?a_id=' + this.attributes.a_id},
  });

  var PhotoList = Backbone.View.extend({
    el: '#picturebar',
    render: function(options) {
      var photos =  new Photos();
      var that = this;
      photos.fetch({
        data: { n: options.n, a_id: options.a_id },
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photos) {
          var template = _.template($('#photos-template-text').html());
          var html = template({ photos: photos.models });
          that.$el.append(html);
          return this;
        }
      })
      
    }
  });
  var ShowPhoto = Backbone.View.extend({
    el: '#picture-container',
    render: function(options) {
      var photo = new Photo({a_id: options.a_id, id: options.id});
      var that = this;
      photo.fetch({
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photo) {
          var template = _.template($('#photo-template-text').html());
          var html = template({photo: photo});
          that.$el.html(html);
          if ($('#picturebar').html() == "")
          {
            photoList.render({a_id: #{params[:a_id]}, n: 0});
          }
          return this;
        }        
      })
    }
  });

  var Router = Backbone.Router.extend({
    routes: {
      '':         'home',
      'show/:id': 'show',
    }
  });

  var router = new Router();
  var photoList = new PhotoList();
  var showPhoto = new ShowPhoto();

  router.on('route:home', function() {
    photoList.render({a_id: #{params[:a_id]}, n: 0});
  });
  router.on('route:show', function(id) {
    showPhoto.render({a_id: #{params[:a_id]}, id: id})
  });
  Backbone.history.start();
