- thumbsize = 50
- blueish = '#39f'
- borderWidth = 2
- iconPixelDim = 16
- handleWidth = 10
- thumbsizeWithBorder = thumbsize + borderWidth
- magic_adjustment_factor = 8

- language = :ia
- translations = { en: { confirmDeleteFace: 'Do you really want to delete this face?',
                         deleteFace: 'Delete face',
                         detailsButton: 'Details', 
                         photoButton: 'Photo', 
                         markPhoto: 'Mark this photo for later attention',
                         restoreButton: 'Restore Faces',
                         tryAgain: 'An error occurred. Please try again.' }, 
                   ia: { confirmDeleteFace: 'oDay youway eallyray antway otay eleteday isthay acefay?',
                         deleteFace: 'eleteDay acefay',
                         detailsButton: 'etailsDay', 
                         photoButton: 'otoPhay',
                         markPhoto: 'arkMay isthay otophay orfay aterlay attentionway',
                         restoreButton: 'estoreRay acesFay',
                         tryAgain: 'Anway errorway occurredway. easePlay ytray againway.' } }

:javascript
  var endGap = 400; // pixels
  var photoWidth = #{thumbsizeWithBorder}; // pixels (borderWidth px on each side)
  var totalPhotos = #{@total_photos};
  var photosPerRequest = #{Api::V1::PicsController::PAGESIZE};
  var lastRequestN = Math.floor(totalPhotos  / photosPerRequest);

  var app = angular.module('mugmarker', ['ui.router']);

  // Configure the router (ui-router)
  app.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    $stateProvider
      .state('photo',
             {
               url:'/photo/:id',
               templateUrl: '/templates/photo.html',
               controller: 'PhotoController'
             })
      .state('detail', 
             {
               url:'/detail/:id',
               templateUrl: '/templates/detail.html',
               controller: 'DetailController'
             })
  }]);

  // mmMovable: not really draggable (no drop needed), with a containment rectangle specified
  // derived from https://docs.angularjs.org/guide/directive (see "Creating a Directive that Adds Event Listeners")
  
  app.directive('mmMovable', ['$document', function($document) {
    return {
      scope:
      {
        face: '=mmMovable',
        behavior: '@mmMovableBehavior',
        containment: '=mmMovableContainment'
      },
      link: function(scope, element, attr, ctrl) 
      {
        var ele = element[0]; // extract the actual element

        var top = scope.containment.top - (ele.offsetHeight / 2);
        var bottom = scope.containment.top + scope.containment.height - (ele.offsetHeight / 2);

        var left = scope.containment.left - (ele.offsetWidth / 2);
        var right = scope.containment.left + scope.containment.width - (ele.offsetWidth / 2);
        
        var startX = 0, startY = 0;
        var x = scope.face.h - #{magic_adjustment_factor};
        var y = scope.face.w - #{magic_adjustment_factor};

        element.on('mousedown', function(event) {
          event.preventDefault(); // Prevent default dragging of selected content
          event.stopPropagation(); // The handle is nested in the frame, so it fires 2x
          startX = event.pageX - x;
          startY = event.pageY - y;
          $document.on('mousemove', mousemove);
          $document.on('mouseup', mouseup);
        });

        function mousemove(event) {
          var deltaX = x;
          var deltaY = y;
          y = Math.min(Math.max(event.pageY - startY, top), bottom);
          x = Math.min(Math.max(event.pageX - startX, left), right);
          deltaX = x - deltaX;
          deltaY = y - deltaY;

          if (scope.behavior == 'resize')
          {
            scope.face.x -= deltaX;
            scope.face.y -= deltaY;
            scope.face.h += deltaY * 2;
            scope.face.w += deltaX * 2;
          }
          else if (scope.behavior == 'move')
          {
            scope.face.x += deltaX;
            scope.face.y += deltaY;
          }

          scope.$apply();
        }

        function mouseup() {
          $document.off('mousemove', mousemove);
          $document.off('mouseup', mouseup);
        }
      }
    };
  }]);

  var appServices = angular.module('phonecatServices', ['ngResource']);

  appServices.factory('Photo',  ['$resource',
                                        function($resource)
                                        { // TODO HOW DO YOU DEAL WITH ERRORS?
                                          return $resource('#{api_v1_pics_path}/:photoId.json', 
                                                           {}, 
                                                           {
                                                              query: 
                                                                {
                                                                  method:'GET', 
                                                                  params:
                                                                  {
                                                                    photoId: 200, 
                                                                    aId: 1
                                                                  },
                                                                  isArray: true
                                                              }
                                                            }
                                          );
                                        }
                                      ]
  );
  /*

    // ***** Everything from this point down has to do with resizing/moving faces ***** //
    // ***** Only faces that were manually created are allowed to perform these functions ***** //

    var faceOriginalW;
    var faceOriginalH;
    var relPos;

    var setRelPos = function()
    {
      faceOriginalW = Math.floor(0.5 + $(face).width()); // round it up/down
      faceOriginalH = Math.floor(0.5 + $(face).height()); // round it up/down
      facePosition = $(face).position();
      relPos = {top: Math.floor(0.5 + facePosition.top) + faceOriginalH - #{handleWidth/2} + #{borderWidth}, 
                left: Math.floor(0.5 + facePosition.left) + faceOriginalW - #{handleWidth/2} + #{borderWidth}};
    }

    setRelPos();

    var setHandleContainmentRectangle = function(target)
    {
      var faceCenterX = containerPosition.left + facePosition.left + (faceOriginalW / 2);
      var faceCenterY = containerPosition.top + facePosition.top + (faceOriginalH / 2);
      var distanceToEachEdge = [faceCenterX - containerPosition.left, 
                                containerPosition.left + $('#picture-container > img').width() - faceCenterX];
      var maxDeltaX = Math.min.apply(null, distanceToEachEdge);
      distanceToEachEdge = [faceCenterY - containerPosition.top, 
                            containerPosition.top + $('#picture-container > img').height() - faceCenterY];
      var maxDeltaY = Math.min.apply(null, distanceToEachEdge);
      var handleContainment = [faceCenterX, // Do not adjust because handle is positioned from its left edge
                               faceCenterY,
                               faceCenterX + maxDeltaX - #{handleWidth},
                               faceCenterY + maxDeltaY - #{handleWidth}
                              ];
      $(target).draggable('option', 'containment', handleContainment); 
    }
    var setFaceContainmentRectangle = function(target)
    {
      var faceContainmentRectangle = [containerPosition.left + #{handleWidth/2}, 
                                      containerPosition.top + #{handleWidth/2},
                                      containerPosition.left + $('#picture-container > img').width() -
                                        ($(face).width() + #{handleWidth}),
                                      containerPosition.top + $('#picture-container > img').height() -
                                        ($(face).height() + #{handleWidth})];
      $(target).draggable('option', 'containment', faceContainmentRectangle)
    }
  */
  app.controller('DetailController', ['$scope',
                                      '$stateParams',
                                      '$http',
                                      function($scope, $stateParams, $http)
                                      {
                                        $http.get('#{details_api_v1_pics_path(format: :json)}?a_id=1&id=' + $stateParams.id )
                                             .success(function(response)
                                                      {
                                                        $scope.details = response
                                                      })
                                        $scope.detailsAsJson = function()
                                        {
                                          return angular.toJson($scope.details, true);
                                        }
                                      }
  ])
  app.controller('PhotoController', ['$scope',
                                      '$stateParams',
                                      '$http', 
                                      function($scope, $stateParams, $http)
                                      {
                                        $http.get("#{api_v1_pics_path}/" + $stateParams.id + ".json?a_id=1") // TODO Add actual photo id
                                             .success(function(response)
                                                      { 
                                                         $scope.photo = response;
                                                      }
                                             );
                                             // TODO ERROR HANDLING
                                        $scope.addFaceAt = function(x, y)
                                        {
                                          // We calculate the average width and height of visible faces
                                          var faces = $scope.photo.notes;
                                          var sumW = 0;
                                          var sumH = 0;
                                          var meanWidth = 0;
                                          var meanHeight = 0;
                                          var minFaceDimension = 50; /* Pixels */
                                          var n = 0;
                                          for (var i = 0; i < faces.length; i++)
                                          {
                                            // Skip the deleted faces
                                            if (!faces[i].deleted)
                                            {
                                              sumW += faces[i].w;
                                              sumH += faces[i].h;
                                              n += 1;
                                            }
                                          }
                                          if (n > 0)
                                          {
                                            meanWidth = sumW / n;
                                            meanHeight = sumH / n;
                                          }

                                          meanWidth = Math.max(meanWidth, minFaceDimension);
                                          meanHeight = Math.max(meanHeight, minFaceDimension);

                                          var face = {x: x - (meanWidth / 2), 
                                                      y: y - (meanHeight / 2), 
                                                      w: meanWidth, 
                                                      h: meanHeight, 
                                                      deleted: false,
                                                      manual: true, 
                                                      text: null,
                                                      faceId: null,
                                                    };
                                          if ((0 < face.x) && (face.x < ($scope.photo.scaled_w - (meanWidth / 2))) &&
                                              (0 < face.y) && (face.y < ($scope.photo.scaled_h - (meanHeight / 2))))
                                          {
                                            faces.push(face);
                                          }
                                        }
                                        $scope.confirmFaceDelection = function(face)
                                                                      {
                                                                        if (confirm('#{translations[language][:confirmDeleteFace]}'))
                                                                        {
                                                                          face.deleted = true;
                                                                          $scope.setHoverFace(null);
                                                                        }
                                                                      }
                                        $scope.handleVisible = function()
                                                               {
                                                                 return true;
                                                               }
                                        $scope.setHoverFace = function(face)
                                                              {
                                                                $scope.hoverFace = face;
                                                              }
                                        $scope.setHoverFace(null);
                                      }
                                    ]
  );

   app.controller('NavigationController', [ '$scope',
                                            '$stateParams',
                                            '$http', 
                                            function($scope, $stateParams, $http)
                                            {
                                              $http.get("#{api_v1_pics_path(format: :json)}?a_id=1&n=1")
                                                   .success(function(response)
                                                            { 
                                                               $scope.photos = response;
                                                            }
                                                   );
                                              $scope.indexX = function(item)
                                                              {
                                                                return endGap + (item.index * photoWidth);
                                                              }
                                              $scope.currentPhotoIndex = function()
                                                                         {
                                                                           return $stateParams.id;
                                                                         }
                                            }
                                          ]
  );

  app.controller('NamesController', [ '$scope', 
                                      '$http', 
                                      function($scope, $http)
                                      {
                                        $http.get("#{api_v1_names_path}.json?a_id=1")
                                             .success(function(response)
                                                      { 
                                                         $scope.names = response;
                                                      }
                                             );
                                          $scope.setSelectedName = function(name)
                                                                   {
                                                                     selectedName = name
                                                                   }
                                      }
                                    ]
  );

  app.filter('matchesNameNeedle', function ()
                                  {
                                    return function (name) {
                                        return name.publicName.toUpperCase();
                                    };
                                  }
  );


-# // ***** This is all the markup for the page *****
.row
  %p#notice= notice

.div{'ng-controller' => 'NavigationController'}
  .row#picturebar-container{style: 'height: 114px; overflow-y: scroll; white-space: nowrap;'}
    #picturebar{style: 'position:relative;' }
      .picturethumb.unselected{'ng-repeat' => 'photo in photos', |
                               'ng-style' => '{position: "absolute", "background-repeat": "no-repeat", |
                                               "background-position": "center", |
                                               "background-image": "url(\"" + photo.thumb + "\")", top: "27px", |
                                               left: indexX(photo) + "px"}'}
        %a{'ui-sref' => 'photo({id: photo.id})'}
          x
      -#  There was code here to make sure it doesn't show the same photo twice:
      -#  <% if ($('.picturethumb[phid=' + photo.get('id') + ']').length == 0) { %>
      -#     phw="<%- photo.get('scaled_w') %>" phh="<%- photo.get('scaled_h') %>"  phid="<%- photo.get('id') %>">
      -# <% var rightX = $('#picturebar-container').scrollLeft() + $('#picturebar-container').width(); %>
      -# <% var rightN = Math.floor(x2i(rightX) / photosPerRequest); %>
      -# <% var currentN = Math.floor(photos[photos.length-1].get('index') / photosPerRequest); %>
      -# <% if ((currentN < rightN) && (currentN < lastRequestN)) { %>
      -# <% photoList.render({a_id: '#{params[:a_id]}', n: currentN + 1}); %>
      -# <% }; %>

  .row{style: 'margin: 1em;'}
    .col-xs-8
      .btn-group{role: :group, 'aria-label' => 'Control what is displayed'}
        %button.btn.btn-default{id: :photoButton, 'ui-sref' => 'photo({id: currentPhotoIndex()})' }
          #{translations[language][:photoButton]}
        %a.btn.btn-default{id: :detailsButton, 'ui-sref' => 'detail({id: currentPhotoIndex()})' }
          #{translations[language][:detailsButton]}
      .btn-group{id: :restoreGroup}
        %button.btn.btn-default.dropdown-toggle{id: :restoreButton, 
                                                'data-toggle' => :dropdown, 
                                                'aria-expanded' => 'false'}
          #{translations[language][:restoreButton]}
          %span.caret
        %ul.dropdown-menu{id: :restoreFaces, role: :menu}
    .col-xs-4
      %span.glyphicon.glyphicon-flag.pull-right{style: 'font-size: 140%;', 
                                                title: translations[language][:markPhoto],
                                                'aria-label' => 'not flagged'}

.row{'ui-view' => true}

%div{'ng-controller' => 'NamesController'}
  #name{style: "display: block;"}
    %form#name-entry-form{novalidate: :novalidate, :style => "width: 20em;"}
      .input-group
        %input#name-entry-box.form-control.input-sm{'ng-model' => "nameNeedle",
                                                    :placeholder => "Enter Name",
                                                    :type => "text"}/
        %span#name-clear.input-group-addon.glyphicon.glyphicon-remove-circle{"aria-label" => "Clear the name input field", |
                                                                             :style => "top: 0;"}
      #names-container{:style => "width: 20em; max-height: 170px; display: block;"}
        .row{'ng-repeat' => 'name in names', 
             'ng-click' => 'setSelectedName(name)',
             'ng-show' => 'name.publicName.toLowerCase().indexOf(nameNeedle.toLowerCase()) > -1'}
          .col-xs-1{:style => "padding-left: 4px; min-width: 38px; "}
            %img{:src => "https://upload.wikimedia.org/wikipedia/en/6/6f/Smiley_Face.png", :style => "height:30px"}/
          .col-xs-10.ellipsis{:style => "padding: 0;"}
            {{ name.publicName }}
            .namenote
              {{ name.note ? name.note : ' ' }} {{name.publicName.toLowerCase().indexOf(nameNeedle.toLowerCase()) > -1 }}

