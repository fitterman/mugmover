:css
  .picturethumb {display: inline-flex; width: 100px; height: 100px; border: 2px solid none; opacity: 0.5;}
  .picturethumb:hover {opacity: 1.0;}
  .selected     {background-color: red; border: 2px solid red; opacity: 1.0; }

%p#notice= notice

- content_for :title do
  flickr / 
  = params[:flickr_id]

#caption
  &nbsp;

#picturebar-container{style: 'height: 120px; overflow-y: scroll; white-space: nowrap;'}
  #picturebar{style: "position:relative;" }

#picture-container{style: 'position:relative;'}
    
:plain
  <script type="text/template" id="photos-template-text">
    <% _.each(photos, function(photo) { %>
      <% if ($('.picturethumb[phid=' + photo.get('id') + ']').length == 0) { %>
          <div class="picturethumb unselected" style="position: absolute; 
              background-repeat: no-repeat; background-position: center; 
              background-image: url('<%- photo.get('thumb') %>');
              left: <%- i2x(photo.get('index')) %>px;" 
              phid="<%- photo.get('id') %>">
          </div>
      <% }; %>
    <% }); %>
    <% var rightX = $('#picturebar-container').scrollLeft() + $('#picturebar-container').width(); %>
    <% var rightN = Math.floor(x2i(rightX) / photosPerRequest); %>
    <% var currentN = Math.floor(photos[photos.length-1].get('index') / photosPerRequest); %>
    <% if ((currentN < rightN) && (currentN < lastRequestN)) { %>
      <% photoList.render({n: currentN + 1}); %>
    <% }; %>
  </script>

  <script type="text/template" id="photo-template-text">
    <img src=<%- photo.get('url') %> style="z-index: 1; position: absolute; top: 0; left: 0; max-width:500px; max-height:500px;">
    <% var notes = photo.get('notes'); %>
    <% for (var i = 0, len = notes.length; i < len; i++) { %>
        <div class="floating" style="z-index: 100; position: absolute; border: 1px solid silver;
            left: <%- notes[i].x %>px; top: <%- notes[i].y %>px;
            width: <%- notes[i].w %>px; height: <%- notes[i].h %>px;" 
            data-caption="<%- notes[i].text %>"></div>
    <% }; %>
  </script>

:javascript
  var endGap = 400; // pixels
  var photoWidth = 104; // pixels (2px on each side + 100px photo)
  var totalPhotos = #{@total_photos};
  var photosPerRequest = #{@photos_per_request};
  var lastRequestN = Math.floor(totalPhotos  / photosPerRequest);

  // functions to convert a zero-based index to a horizontal pixel offset and back.
  var i2x = function(i) { return endGap + (i * photoWidth) };
  var x2i = function(x) { return Math.floor((x - endGap) / photoWidth) };

  $('#picturebar').width(i2x(totalPhotos) + endGap); // that is the endGap on the RHS
  $('#picture-container').on('mouseover', '.floating', function() {
    $(this).css('border-color', 'red');
    $('#caption').html($(this).data('caption'));
  })
  $('#picture-container').on('mouseout', '.floating', function() {
    $(this).css('border-color', 'silver');
    $('#caption').html('&nbsp;');
  });

  var scrollingDone = function() {
    var x = $('#picturebar-container').scrollLeft();
    var i = x2i(x);
    photoList.render({n: Math.floor(i / photosPerRequest)}); 
  };
  $('#picturebar-container').scroll( $.debounce( 250, scrollingDone) );

  $('#picturebar').on('click', '.picturethumb', function() {
    $('#picturebar > .selected').removeClass('selected').addClass('unselected');
    $(this).removeClass('unselected').addClass('selected');
    router.navigate('show/' + $(this).attr('phid') , {trigger: true}); 
  });

  var Photos = Backbone.Collection.extend({
    url: '/flickr/#{params[:flickr_id]}/photos'
  });
  var Photo = Backbone.Model.extend({
    urlRoot: '/flickr/#{params[:flickr_id]}/photos'
  });

  var PhotoList = Backbone.View.extend({
    el: '#picturebar',
    render: function(options) {
      var photos =  new Photos();
      var that = this;
      photos.fetch({
        data: { n: options.n },
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photos) {
          var template = _.template($('#photos-template-text').html());
          var html = template({ photos: photos.models });
          that.$el.append(html);
          return this;
        }
      })
      
    }
  });
  var ShowPhoto = Backbone.View.extend({
    el: '#picture-container',
    render: function(options) {
      var photo = new Photo({id: options.id});
      var that = this;
      photo.fetch({
        error: function(photos) {
          alert('An unexpected error occurred. Please try again.');
        },
        success: function(photo) {
          var template = _.template($('#photo-template-text').html());
          var html = template({photo: photo});
          that.$el.html(html);
          return this;
        }        
      })
    }
  });

  var Router = Backbone.Router.extend({
    routes: {
      '':         'home',
      'show/:id': 'show',
    }
  });

  var router = new Router();
  var photoList = new PhotoList();
  var showPhoto = new ShowPhoto();

  router.on('route:home', function() {
    photoList.render({n: 0});
  });
  router.on('route:show', function(id) {
    showPhoto.render({id: id})
  });
  Backbone.history.start();
